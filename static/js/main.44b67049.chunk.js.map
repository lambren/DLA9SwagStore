{"version":3,"sources":["Constants.js","components/LoginPage.js","components/NavBar.js","components/ListItem.js","components/CommentSection.js","components/CommentList.js","components/CommentPage.js","components/BalancePage.js","components/Password.js","App.js","serviceWorker.js","index.js","asset/Amazon.jpg"],"names":["HOSTNAME","LoginPage","props","useState","noMatch","setNoMatch","checking","setChecking","onChangeLogin","event","setLogin","target","value","toLowerCase","onSubmit","preventDefault","fetch","login","method","then","res","json","data","status","swag","setSwag","parseInt","setCart","cart","setID","user_id","noPassword","current","setRoute","reason","Error","catch","err","console","log","message","className","id","style","padding","htmlFor","type","onChange","onClick","src","Amazon","alt","width","height","NavBar","alert","useAlert","marginLeft","balance","currentList","fontSize","placeholder","onChangeSearch","display","flexDirection","marginRight","logOut","setCommentPage","commentPage","setSearch","setCurrentList","error","setItemList","swag_items","ListItem","inputRef","createRef","confirming","setConfirming","quantity","setQuantity","transform","border","item","swag_name","swag_image","isStore","price","stock","alignItems","justifyContent","ref","mode","cache","credentials","headers","redirect","referredPolicy","body","JSON","stringify","swag_item_id","store","success","onCartAdd","margin","selectMessage","CommentSection","content","setContent","loading","setLoading","rows","e","finally","CommentList","comments","setComments","useEffect","map","key","comment_id","borderBottom","user_name","user_first_name","response","CommentPage","marginTop","BalancePage","search","cart_id","itemList","filter","includes","selectList","Password","password","setPassword","confirm","setConfirm","onChangePassword","onCreate","match","App","setUserID","useRef","route","determineRoute","Boolean","window","location","hostname","options","position","positions","BOTTOM_CENTER","timeout","offset","transition","transitions","FADE","ReactDOM","render","StrictMode","template","AlertTemplate","document","getElementById","navigator","serviceWorker","ready","registration","unregister","module","exports"],"mappings":"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","file":"static/js/main.44b67049.chunk.js","sourcesContent":["const HOSTNAME = 'https://tranquil-meadow-63605.herokuapp.com/';\r\nexport {HOSTNAME};","import React, {useState} from 'react';\r\nimport {HOSTNAME} from './../Constants'\r\nimport Amazon from './../asset/Amazon.jpg'\r\nimport './../App.scss'\r\n\r\n\r\nconst LoginPage = (props) => {\r\n    const [noMatch, setNoMatch] = useState(false);\r\n    const closed = false;\r\n    const [checking, setChecking] = useState(false);\r\n  \r\n    const onChangeLogin = (event) => {\r\n      props.setLogin(event.target.value.toLowerCase());\r\n    }\r\n\r\n    const onSubmit = (event) => {\r\n      event.preventDefault();\r\n  \r\n      setNoMatch(false);\r\n      setChecking(true);\r\n  \r\n      fetch(HOSTNAME + 'swag-balance/' + props.login, {\r\n        method: 'GET', })\r\n        .then(res => res.json())\r\n        .then(data => {\r\n          setChecking(false);\r\n  \r\n          if (data.status === 'SUCCEED') {\r\n            if (data.swag) props.setSwag(parseInt(data.swag,10));\r\n            else props.setSwag(0);\r\n            props.setCart(data.cart);\r\n            props.setID(data.user_id);\r\n            props.noPassword.current = data.noPassword;\r\n\r\n            props.setRoute('PASSWORD');\r\n          }\r\n          else if (data.reason === 'NO_MATCH') \r\n          {\r\n            setNoMatch(true);\r\n          }\r\n          else throw(new Error('FAILED'));\r\n        })\r\n        .catch(err => {\r\n          setChecking(false);\r\n          console.log(err)\r\n        });\r\n    }\r\n    var message = '';\r\n\r\n    const chooseClose = () => {\r\n      if (closed){\r\n        message = 'We are pleased to announce that the DLA9 SWAG Store has been RE-OPENED. Thank you all for your hard work!'\r\n        return (<div><p>{message}</p></div>);\r\n      }\r\n      else \r\n      {\r\n        message = 'We are pleased to announce that the DLA9 SWAG Store has been RE-OPENED. Thank you all for your hard work!';\r\n        return(\r\n          <div className=\"App\" id='main-screen'>\r\n          {\r\n              ((checking) ? <div className='loader'/> :\r\n              <div className='inner-screen'>\r\n                <h1>Welcome, DLA9 SWAGGERS!</h1>\r\n                <h1 style={{padding: '20px'}}>{message}</h1>\r\n                <form className='my-form' onSubmit={onSubmit}>\r\n                    <label htmlFor='login'>\r\n                      Enter your login to begin\r\n                    </label>\r\n                    <input type='text' onChange={onChangeLogin}/>\r\n                    <button onClick={onSubmit}>Submit</button>\r\n                </form>\r\n                    {(noMatch)? <h2>Sorry, I could not find your data, please provide your accurate login</h2> : <div/>}\r\n                <img src={Amazon} alt='Amazon Logo' width='320px' height='auto'/>\r\n              </div>\r\n              )}\r\n          </div>);\r\n        }\r\n    }\r\n  \r\n    return (\r\n      <div className=\"App\" id='main-screen'>\r\n      {\r\n        chooseClose()\r\n      }\r\n      </div>\r\n    );\r\n  \r\n  // return (<div><p>{message}</p></div>);\r\n   \r\n}\r\n\r\n\r\n\r\nexport default LoginPage;","import React from 'react';\r\n\r\nimport {HOSTNAME} from './../Constants';\r\n\r\nimport {useAlert} from 'react-alert';\r\n\r\nimport './../App.scss';\r\n\r\nconst NavBar = (props) => {\r\n\r\n    const alert = useAlert();\r\n\r\n    const goToStore = () => {\r\n        props.setCommentPage(false);\r\n        props.setSearch('');\r\n        props.setCurrentList('LOADING');\r\n        fetch(HOSTNAME + 'get-list-of-swag')\r\n            .then(res => res.json())\r\n            .then(data => {\r\n                props.setItemList(data.swag_items);\r\n                props.setCurrentList('STORE');\r\n            })\r\n            .catch(err => {\r\n                console.log(err);\r\n                alert.error('Connection to the server lost! Please check your internet connection!');\r\n                props.setCurrentList('STORE');\r\n            });\r\n    }\r\n\r\n    const goToCart = () => {\r\n        props.setCommentPage(false);\r\n        props.setSearch('');\r\n        props.setCurrentList('LOADING');\r\n        fetch(HOSTNAME + 'get-cart/' + props.user_id)\r\n            .then(res => res.json())\r\n            .then(data => {\r\n                console.log(data);\r\n                props.setCart(data.data);\r\n                props.setCurrentList('CART');\r\n            })\r\n            .catch(err => {\r\n                 console.log(err);\r\n                 alert.error('Connection to the server lost! Please check your internet connection!');\r\n                 props.setCurrentList('CART');\r\n            });\r\n    }\r\n    return (\r\n        <div id='nav-bar'>\r\n            <h3 style={{marginLeft:'10px'}}>SWAG: ${props.balance}</h3>\r\n            { \r\n                (props.currentList === 'STORE')?\r\n                    <input style={{fontSize: '14px', padding: '10px'}} \r\n                                    placeholder='Search Item...'\r\n                                    onChange={props.onChangeSearch}></input>\r\n                                    : <div></div>\r\n            }\r\n            <div style={{display: 'flex', flexDirection: 'row-reverse', marginRight: '10px'}}>\r\n                <button onClick={props.logOut}>Log out</button>\r\n                <button onClick={() => {props.setCommentPage(commentPage => !commentPage)}} >Comments</button>\r\n                {\r\n                    (props.currentList === 'STORE') ?\r\n                        <button onClick={goToCart}>My Orders</button> :\r\n                        <button onClick={goToStore}>Go To Store</button>\r\n                }\r\n            </div>\r\n\r\n        </div>);\r\n}\r\n\r\nexport default NavBar;","import React, {useState, createRef} from 'react';\r\n\r\nimport {useAlert} from 'react-alert';\r\n\r\nimport {HOSTNAME} from './../Constants'\r\n\r\nconst ListItem = (props) => {\r\n    const alert = useAlert();\r\n\r\n    const inputRef = createRef();\r\n\r\n    const [confirming, setConfirming] = useState(false);\r\n\r\n    const [quantity, setQuantity] = useState(0);\r\n\r\n    const onChangeQuantity = (event) => {\r\n        setQuantity(event.target.value);\r\n\r\n    }\r\n\r\n    const onCartAdd = () => {\r\n        if (quantity === 0) return 0;\r\n        props.setCurrentList('LOADING');\r\n        fetch(HOSTNAME + 'add-to-cart', {\r\n            method: 'POST',\r\n            mode: 'cors',\r\n            cache: 'no-cache',\r\n            credentials: 'same-origin',\r\n            headers: {\r\n                'Content-Type': 'application/json'\r\n            },\r\n            redirect: 'follow',\r\n            referredPolicy: 'no-referrer',\r\n            body: JSON.stringify({\r\n                user_id: props.user_id,\r\n                swag_item_id: props.item.swag_item_id,\r\n                quantity,\r\n            })\r\n        }).then(res => res.json())\r\n        .then(data => {\r\n            if (data.status === 'SUCCESS')\r\n            {    \r\n                console.log('SUCCESS');\r\n                props.setItemList(data.store);\r\n                props.setSwag(data.swag);\r\n                alert.success('Order is placed. We will try our best to deliver it asap!')\r\n            }\r\n            else if (data.reason !== 'CLOSED') {\r\n                console.log('FAILED');\r\n                alert.error('Im Sorry. Your Order Was not placed. Please check your balance and the availbility of the item!')\r\n            } else alert.error('The SWAG Store is currently Closed! Please stay tuned for any updates! We are sorry for any inconvenience!')\r\n            props.setCurrentList('STORE');\r\n        }).catch(err => {\r\n            alert.error('Connection to the server lost! Please check your internet connection!')\r\n            props.setCurrentList('STORE');\r\n        });\r\n\r\n        inputRef.current.value = '';\r\n        setQuantity(0);\r\n    }\r\n\r\n\r\n    const selectMessage = (status) => {\r\n        switch (status) \r\n        {\r\n            case 'PROCESSING':\r\n                return ('We are processing your order! Please check back in 1-2 days for your order status.')\r\n            case 'DELIVERED':\r\n                return ('Thank you for your purchase! Your order has been delivered!')            \r\n            case 'RECEIVED':\r\n                return ('We received your order, and we are trying our best to fulfill it. Please check back later in 1 or 2 days. Thank you for your patience!')\r\n            case 'FULFILLED':\r\n                return ('We have fulfilled your order, and your items are now in the Swag Cage. You can tell a Manager to get it to you!')\r\n            case 'BACKORDERED':\r\n                return ('We are sorry, but rest assured that your items are on its way. Please check back later. Thank you for your patience!')\r\n            case 'CANCELLED':\r\n                return ('Your order has been cancelled, and you have been refunded the money for this order.')\r\n            default: return('');\r\n        }\r\n    }\r\n\r\n    return(\r\n        <div id='list-item' style={(confirming)? {transform: 'scale(1.2)', border: '2px solid gray'} : {}}>\r\n            <h3>{props.item.swag_name}</h3>\r\n            <img width='200' height='200' src={props.item.swag_image} alt='swag_item_image'></img>\r\n            {(props.isStore) ? \r\n                <div>\r\n                    <label>Price: ${props.item.price}  </label>\r\n                    <label>Stock: {props.item.stock}</label>\r\n                    <div style={{display: 'flex', alignItems: 'center', justifyContent: 'center'}}>\r\n                        <label>Quantity: </label>\r\n                        <input ref={inputRef} placeholder='0' onChange={onChangeQuantity}></input>\r\n                    </div>\r\n                    {\r\n                        (!confirming) ? \r\n                        <button onClick={() => setConfirming(true)}>Order Now!</button> :\r\n                        <div>\r\n                            <h4 id='confirm-message'>I would like to order this item</h4>\r\n                            <button className='no-button'\r\n                                onClick={()=>setConfirming(false)}>NO</button>\r\n                            <button className='yes-button'\r\n                                onClick={() => {\r\n                                    setConfirming(false);\r\n                                    onCartAdd();\r\n                                    }}>CONFIRM</button>\r\n                        </div>\r\n                    }   \r\n                </div> :\r\n                <div style={{margin: '10px'}}>\r\n                    <p>Quantity: {props.item.quantity}</p>\r\n                    <p>Status: {props.item.status}</p>\r\n                    <p>{selectMessage(props.item.status)}</p>\r\n                </div>\r\n                \r\n            }\r\n        </div>)\r\n}\r\n\r\nexport default ListItem;","import React, {useState} from 'react'\r\nimport {HOSTNAME} from './../Constants'\r\nimport {useAlert} from 'react-alert'\r\n\r\nconst CommentSection = (props) => {\r\n    const user_id = props.user_id;\r\n    const [content, setContent] = useState('');\r\n    const [loading, setLoading] = useState(false);\r\n    const alert = useAlert();\r\n\r\n    const onSubmit = () => {\r\n        setLoading(true);\r\n        fetch(HOSTNAME + 'post-comment', {\r\n            method: 'POST', \r\n            headers: {\r\n                \"Content-Type\" : 'application/json'\r\n            },\r\n            body: JSON.stringify({\r\n                user_id, \r\n                content\r\n            })\r\n        }).then(res => res.json())\r\n        .then(data => {\r\n            if (data.status === 'SUCCESS') alert.success('SUCCESSFULLY POSTED COMMENT! THANK YOU FOR YOUR FEEDBACK!')\r\n            else alert.error('OOPS! Something went wrong! Please try again later')\r\n        }).catch(e => {\r\n            console.log(e);\r\n            alert.error('OOPS! Something went wrong! Please try again later');\r\n        }).finally(() => {\r\n            setContent('');\r\n            setLoading(false);\r\n        })\r\n    }\r\n\r\n    return(\r\n        <div id='list-item' className='comment-box' style={{padding: '10px'}}>\r\n            {(loading) ? <div className='loader'/> :\r\n            <div>\r\n                <h3>Comment Section</h3>\r\n                <textarea value={content}\r\n                    rows={5} \r\n                    style={{display:'block', width: '70vw'}}\r\n                    placeholder='Please leave any comments for the SWAG store here. Thank you for your feed back!'\r\n                    onChange={(e) => setContent(e.target.value)}/>\r\n                <button onClick={onSubmit}>Submit</button>\r\n            </div>}\r\n        </div>\r\n    )\r\n\r\n}\r\nexport default CommentSection;","import React, { useEffect, useState } from 'react'\r\nimport { HOSTNAME } from './../Constants'\r\nimport {useAlert} from 'react-alert'\r\n\r\nconst CommentList = (props) => {\r\n    const {user_id} = props\r\n    const alert = useAlert();\r\n\r\n\r\n    const [comments, setComments] = useState([]);\r\n\r\n    const fetchData = () => {\r\n        fetch(HOSTNAME + 'get-all-comments')\r\n        .then(res => res.json())\r\n        .then(data => {\r\n            console.log(data);\r\n            if (data.status === \"SUCCESS\") \r\n                setComments(data.data);\r\n            else alert.error('ERROR FETCHING COMMENTS');\r\n        }).catch(e => {\r\n            console.log(e);\r\n        })\r\n    }\r\n    useEffect(fetchData, []);\r\n\r\n    return (\r\n        <div id='list-item' className='comment-box'>\r\n            <h3>Comments</h3>\r\n                <div className='comments'>\r\n                {\r\n                    comments.map(item => \r\n                        <div key={item.comment_id} style={{borderBottom: 'solid gray 1px'}}>\r\n                            <p>{item.user_name} ({item.user_first_name}): {item.content}</p>\r\n                            <p>{item.response}</p>\r\n                        </div>\r\n                    )\r\n                }\r\n                </div>\r\n        </div>\r\n    )\r\n}\r\nexport default CommentList;","import React from 'react'\r\nimport CommentSection from './CommentSection'\r\nimport CommentList from './CommentList'\r\n\r\nconst CommentPage = (props) => {\r\n    const {user_id} = props\r\n\r\n    return (\r\n        <div id='main-screen'\r\n            style={{marginTop: '5em'}}>\r\n            <CommentList user_id={user_id}/>\r\n            <CommentSection user_id={user_id}/>\r\n        </div>\r\n    )\r\n}\r\nexport default CommentPage;","import React, {useState} from 'react';\r\n\r\nimport NavBar from './NavBar';\r\nimport ListItem from './ListItem';\r\n\r\n\r\nimport Amazon from './../asset/Amazon.jpg';\r\n\r\nimport './../App.scss';\r\nimport CommentPage from './CommentPage';\r\n\r\n\r\nconst BalancePage = (props) => {\r\n\r\n    const [currentList, setCurrentList] = useState('STORE');\r\n    const [search, setSearch] = useState('');\r\n    const [commentPage, setCommentPage] = useState(false);\r\n    const onChangeSearch = (event) => {\r\n        setSearch(event.target.value);\r\n    }\r\n\r\n    const logOut = () =>\r\n    {\r\n        props.setRoute('LOGIN');\r\n        props.setID('');\r\n        props.setLogin('');\r\n    }\r\n\r\n    const selectList = () => \r\n    {\r\n        switch(currentList) {\r\n            case 'LOADING':\r\n                return (<div className='loader'></div>)\r\n\r\n            case 'CART':\r\n                return(\r\n                    <div id='list'>\r\n                        {\r\n                            props.cart.map(item => <ListItem user_id={props.user_id}\r\n                                isStore={false} key={item.cart_id} item={item}/>)\r\n                        }\r\n                    </div>\r\n                )\r\n            \r\n            default: \r\n                return(\r\n                        <div id='list'>\r\n                            {props.itemList.filter(item => item.swag_name.includes(search))\r\n                                .map(item => \r\n                                    <ListItem user_id={props.user_id} \r\n                                        isStore={true} key={item.swag_item_id} item={item} \r\n                                        setCart={props.setCart} setSwag={props.setSwag} \r\n                                        setItemList={props.setItemList} setCurrentList={setCurrentList}>\r\n                                    </ListItem>\r\n                            )}\r\n                        </div>\r\n                        );\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <NavBar currentList={currentList} \r\n                    logOut={logOut} \r\n                    setCurrentList={setCurrentList} \r\n                    balance={props.swag}\r\n                    setCart={props.setCart}\r\n                    setItemList={props.setItemList}\r\n                    user_id={props.user_id}\r\n                    onChangeSearch={onChangeSearch}\r\n                    setSearch={setSearch}\r\n                    setRoute={props.setRoute}\r\n                    setCommentPage={setCommentPage}></NavBar>\r\n\r\n            <div>\r\n            {\r\n                (commentPage) ? <CommentPage user_id = {props.user_id}/> : \r\n                <div id='main-screen'>\r\n                    {selectList()}\r\n                    <img src={Amazon} alt='Amazon Logo' width='320px' height='auto'/>\r\n                </div>\r\n\r\n            }\r\n            </div>\r\n        </div>);\r\n}\r\n\r\nexport default BalancePage;","import React, {useState} from 'react';\r\nimport {useAlert} from 'react-alert';\r\n\r\n\r\nimport {HOSTNAME} from './../Constants'\r\nimport Amazon from './../asset/Amazon.jpg'\r\nimport './../App.scss'\r\n\r\nconst Password = (props) => {\r\n    const alert = useAlert();\r\n\r\n    const [loading, setLoading] = useState(false);\r\n    const [password, setPassword] = useState('');\r\n    const [confirm, setConfirm] = useState('');\r\n\r\n    const onChangePassword = (event) => {\r\n        setPassword(event.target.value);\r\n    }\r\n\r\n    const onChangeConfirm = (event) => {\r\n        setConfirm(event.target.value);\r\n    }\r\n\r\n    const onCreate = (event) => {\r\n        event.preventDefault();\r\n\r\n\r\n        if (password === confirm)\r\n        {\r\n            setLoading(true);\r\n            fetch(HOSTNAME + 'initiate-password/', \r\n                {\r\n                    method: 'POST',\r\n                    headers: {\r\n                        'Content-Type' : 'application/json',\r\n                    },\r\n                    body: JSON.stringify({\r\n                        user_id: props.user_id,\r\n                        password: password,\r\n                    })\r\n            }).then(res => res.json())\r\n            .then(data => {\r\n                setLoading(false);\r\n                if (data.status === 'SUCCESS') \r\n                {\r\n                    alert.success('Successfully created your password! Please remember it for future log in! Enjoy shopping!');\r\n                    props.setRoute('ORDER');\r\n                }\r\n                else \r\n                {\r\n                    alert.error('Password not created! please try again later or contact IT support!')\r\n                    props.setRoute('LOGIN');\r\n                }\r\n            }).catch(err => {\r\n                console.log(err);\r\n                setLoading(false);\r\n                alert.error('Cannot connect to server, please check your connection!');\r\n                props.setRoute('LOGIN');\r\n            })\r\n        }\r\n        else alert.error('password and confirmation do not match, please try again');\r\n    }\r\n\r\n    const onSubmit = (event) => {\r\n        event.preventDefault();\r\n\r\n        setLoading(true);\r\n\r\n        fetch(HOSTNAME + 'login/', \r\n        {\r\n            method: 'POST',\r\n            headers : {\r\n                'Content-Type' : 'application/json',\r\n            },\r\n            body: JSON.stringify({\r\n                user_id: props.user_id,\r\n                password: password,\r\n            })\r\n        }).then(res=>res.json())\r\n        .then(data => {\r\n            setLoading(false);\r\n            \r\n            if (data.status === 'SUCCESS')\r\n            {\r\n                if (data.match) \r\n                {\r\n                    alert.success('AUTHENTICATION COMPLETED! Enjoy shopping!')\r\n                    props.setRoute('ORDER');\r\n                }\r\n                else\r\n                {\r\n                    alert.error('AUTHENTICATION FAILED! PLEASE TRY AGAIN WITH CORRECT INFORMATION!');\r\n                    props.setRoute('LOGIN');\r\n                }\r\n            }\r\n            else \r\n            {\r\n                alert.error('SERVER ERROR: FAILED TO AUTHENTICATE! PLEASE TRY AGAIN LATER');\r\n                props.setRoute('LOGIN');\r\n\r\n            }\r\n        }).catch(err => {\r\n            setLoading(false);\r\n            alert.error('CANNOT CONNECT TO SERVER, PLEASE CHECK YOUR CONNECTION!');\r\n            props.setRoute('LOGIN');\r\n        })\r\n    }\r\n\r\n    return (\r\n        <div id='main-screen'>\r\n            {(loading) ? <div className='loader'></div> :\r\n                (props.noPassword.current)? \r\n                    <div>\r\n                        <h1>First time logging in? Create a password for verification!</h1>\r\n                        <form onSubmit={onCreate} className='my-form'>\r\n\r\n                            <label>Password</label>\r\n                            <input type='password' onChange={onChangePassword}></input>\r\n                            <label>Confirm Password</label>\r\n                            <input type='password' onChange={onChangeConfirm}></input>\r\n                            <button onClick={onCreate}>Submit</button>\r\n                        </form>\r\n                    </div>\r\n                    :\r\n                    <div>\r\n                        <h1>Verify that it's YOU!</h1>\r\n                        <form className='my-form' onSubmit={onSubmit}>\r\n\r\n                            <label>Password</label>\r\n                            <input type='password' onChange={onChangePassword}></input>\r\n                            <button onClick={onSubmit}>Submit</button>\r\n                        </form>\r\n                    </div>\r\n            }\r\n            <img src={Amazon} alt='Amazon Logo' width='320px' height='auto'/>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Password;","import React, {useState, useEffect, useRef} from 'react';\r\n\r\nimport './App.scss';\r\n\r\nimport LoginPage from './components/LoginPage'\r\nimport BalancePage from './components/BalancePage'\r\nimport Password from './components/Password'\r\nimport CommentsPage from './components/CommentPage'\r\n\r\nimport {useAlert} from 'react-alert';\r\n\r\nimport {HOSTNAME} from './Constants.js';\r\n\r\n\r\n\r\nfunction App() {\r\n  const alert = useAlert();\r\n\r\n  const [cart, setCart] = useState([]);\r\n  const [login, setLogin] = useState('');\r\n  const [user_id, setUserID] = useState('');\r\n\r\n  const noPassword = useRef(true);\r\n\r\n  const [route, setRoute] = useState('LOGIN');\r\n  const [swag, setSwag] = useState(0);\r\n\r\n  const [itemList, setItemList] = useState([]);\r\n\r\n  useEffect(() => {\r\n    fetch(HOSTNAME + 'get-list-of-swag/')\r\n    .then(res => res.json())\r\n    .then(data => {\r\n      setItemList(data.swag_items);\r\n    }).catch(err => {\r\n      alert.error('cannot connect to server, check you internet connection!');\r\n    });\r\n  }, [alert]);\r\n\r\n  const determineRoute = () => {\r\n    switch(route) {\r\n      case 'ORDER': return(<BalancePage swag={swag} setSwag={setSwag}\r\n                                      route={route} setRoute={setRoute}\r\n                                      setID={setUserID} user_id={user_id}\r\n                                      itemList={itemList} setItemList={setItemList}\r\n                                      setCart={setCart} cart={cart}\r\n                                      login={login} setLogin={setLogin}>\r\n                              </BalancePage>);\r\n\r\n      case 'PASSWORD': return(<Password noPassword={noPassword}\r\n                                        user_id={user_id}\r\n                                        setRoute={setRoute}></Password>)\r\n\r\n      default: return(<LoginPage setRoute={setRoute}\r\n                                setSwag={setSwag}\r\n                                setID={setUserID}\r\n                                setCart={setCart}\r\n                                login={login} setLogin={setLogin}\r\n                                noPassword={noPassword}>\r\n                        </LoginPage>);\r\n    }\r\n  }\r\n  return (\r\n    <div>\r\n      {determineRoute()}\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nimport { transitions, positions, Provider as AlertProvider } from 'react-alert';\r\nimport AlertTemplate from 'react-alert-template-basic';\r\n\r\nconst options = {\r\n  position: positions.BOTTOM_CENTER,\r\n  timeout: 7000,\r\n  offset: '30px',\r\n  transition: transitions.FADE\r\n}\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <AlertProvider template={AlertTemplate} {...options}>\r\n      <App />\r\n    </AlertProvider>\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n","module.exports = __webpack_public_path__ + \"static/media/Amazon.2821557b.jpg\";"],"sourceRoot":""}